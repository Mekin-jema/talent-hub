// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
   url      = "file:./job.db"
}


model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  role        Role     @default(DEVELOPER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  jobs        Job[]    @relation("JobPoster")
  applications Application[]
  
  @@map("users")
}

model Job {
  id          String   @id @default(cuid())
  title       String//
  type        String?   // refer to Full-time  or Part-Time
  description String?
  requirements String?  //???
  responsibilities String?  //??
  location      String?
  aboutCompany    String?
  logo        String?
  salary      Float?
  posted      DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    String ?
  featured    Boolean @default(false)
  skills      Skills[]  //????
  // Relationships
  createdBy   User     @relation("JobPoster", fields: [userId], references: [id])
  userId      String
  applications Application[]
  
  @@map("jobs")
}

model Application {
  id          String   @id @default(cuid())
  status      ApplicationStatus @default(APPLIED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resumeUrl   String?  // For bonus file upload feature
  
  // Relationships
  job         Job      @relation(fields: [jobId], references: [id])
  jobId       String
  applicant   User     @relation(fields: [userId], references: [id])
  userId      String
  
  @@unique([userId, jobId]) // Prevent duplicate applications
  @@map("applications")
}

enum Role {
  DEVELOPER
  EMPLOYER
  ADMIN
}

enum ApplicationStatus {
  APPLIED
  SHORTLISTED
  REJECTED
}

model Skills {
  id String @id @default(uuid())
  name String
  jobId String
  job Job @relation(fields: [jobId], references: [id])
}
